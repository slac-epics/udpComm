R2.20.2    2018/05/16   Kukhee Kim
           * build against evrClient R1.4.2

R2.20.1:   2018/05/10   Kukhee Kim
           * align with 
             - evrClient   R1.4.1
             - timingApi   R0.6
             - miscUtil    R2.2.5


support_evrClient:  2018/05/10  Kukhee Kim
                    Branch out to support evrClient instead of event module.
                    It is a temporal solution until we fully use timingApi.
                    We are going to use tag name R2.20.x for this branch.



R2.11.5:    2018/04/18  T. Straumann
    EVENT    -> R4.3.5
R2.11.4:    2018/04/18  K. Kim
    EVENT    -> R4.3.3

R2.11.3:    2018/03/20  T. Straumann
    EVENT     -> R4.3.1-BR-new_bsa_core
R2.11.2:    2018/03/20  T. Straumann
    TIMINGAPI -> R0.6
    EVENT     -> R4.3.0-BR-new_bsa_core
    DONT use EVRCLIENT
R2.11.0:    2018/03/20  T. Straumann
    drvPadUdpCommHWTime() always uses posix clock_gettime; removed variant
    that relied on EVR-specific code (ErGetTicks).

R2.10.0:    2017/06/06  H. Slepicka
    Bumped Event version to R4.2.9
    Bumped MiscUtils version to R2.2.5

R2.9.0:     2017/02/20  H. Slepicka
    Bumped EVENT version to R4.2.8.
    Changed name of CONFIG_SITE.Common.linuxRT* to remove glibc from it.

udpComm-R2-7-1: 2016/06/23 B. Hill
	Updated to miscUtils-R2-2-3 as the miscUtils-R2-2-2 libmiscUtils.a for linux-x86_64 and linuxRT
		has an undefined symbol S_ISDIR that should have been expanded as a macro.
	Build Linux targets against evrClient-R1-0-p7 and RTEMS targets against event-R4-2-4

udpComm-R2-7-0: 2016/06/13 B. Hill
-   Fixed setsockopt IP_MULTICAST_IF and added udpCommSetMCastTTL() function.
    Modified build to not try and build udpCommBSD for RTEMS as it isn't supported or used.
	Build Linux targets against evrClient-R1-0-p6 and RTEMS targets against event-R4-2-3

udpComm-R2-6-2: 2015/12/02 K. Kim
- Build against evrClient-R1-0-p4

udpComm-R2-6-1: 2015/12/02  K. Kim
- Support for sharing fcom among mutilple viocs
  (allow to reuse address for udpComm layer)

udpComm-R2-6-0: 2015/11/13  K. kim
- Build against evrClient, R1-0-p3, EVR sharing module

udpComm-R2-5-9: 2015/02/19  S.Condamoor
- Update event module - event-R4-1-6

udpComm-R2-5-8: 2015/01/14  K. Kim
- Update event module - event-R4-1-5

udpComm-R2-5-7: 2014/06/20, K. Kim
- Update event module - event-R4-1-3

udpComm-R2-5-6: 2014/04/15, luchini 
- Update event module - event-R4-1-1

udpComm-R2-5-5: 2014/02/28, lpiccoli 
- Update event module - event-R4-1-0

udpComm-R2-5-4: 2014/02/04, sonya
- src/drvPadUdpComm.c: relax restrictions on event time provider
  to support SPEAR BPMs  

udpComm-R2-5-3: 2014/01/29, sonya
 - Build against event-R4-0-0
udpComm-R2-5-2: 2013/08/14, khkim
 - Build against event-R3-4-0

udpComm-R2-5-1: 2013/08/14, scondam
 - Build against event-R3-2-2-br_generaltime-4-0
 
udpComm-R2-4-2: 2013/03/26, khkim
 - Build against event-R3-2-2-br_generaltime-4-0

udpComm-R2-4-1: 2013/03/05, khkim
 - Build against new event module: event-R3-2-2-br_generaltime-3-0

udpComm-R2-4-0 (2013/01/12, T.S):
 - BUGFIX: must increase packet reference count
   *before* calling drvPadUdpCommPostRaw.
 - Added iocsh function 'drvPadUdpCommMaxCookReset()'
   for reading and resetting the 'max cook' statistics.
 - padProtoHost: -m now accepts an optional ': <mcifaddr>' suffix
   so that the interface for incoming multicast traffic can be defined.
 - made 'drvPadUdpCommDebug' accessible from iocsh.
 - BUGFIX - drvPadUdpCommSetupFunc() should only return and do nothing if
   arguments are wrong.
 - modified drvPadUdpCommHWTime() so that ErGetTicks() can be used
   under the hood. Non-EVR implementation may supply its own version.
 - udpCommBSD FIX: udpCommRecv timeout < 0 indicates wait forever;
   BSD implementation didn't implement that correctly.
 - PADPROTO_VERSION4 adds a 'feature query' command which allows
   the client to find the stream formats supported by the server.
 - added a new 'setup' callback which is used to negotiate features
   requested by the client and features supported by the server.
   Server features are determined using the new 'stream query'
   protocol command provided by PADPROTO_VERSION4.
   drvPadUdpCommSetup() does not determine the IO methods based
   on the name ("VME" string vs. IP address) anymore but requires
   a new, third argument which passes/defines the IO methods.
   By default, udpComm is used.
 - BUGFIX: timeout parameters are passed to padRequest in
   host-byte order.
udpComm-R2-3-5:
               - Build against event module: event-R3-2-2-br_generaltime-2-7
udpComm-R2-3-4:
               - Build against event module: event-R3-2-2-br_generaltime-2-6
udpComm-R2-3-3:
               - Build against event module: event-R3-2-2-br_generaltime-2-5
udpComm-R2-3-2:
	       - Build against event module: event-R3-2-2-br_generaltime-2-4

ucpComm-R2-3-1:
               - Build against event module version: event-R3-2-2-br_generaltime-2-3

udpComm-R2-3-0:
        - API CHANGE: (see src/padStream.h)
          PadStreamGetdataProc() received a new, additional
          argument: the total number of samples per channel (= 'row dimension').
          This helps the low-level driver with formatting the data.
          CAVEAT: 'getdata' routines on PADs need to be updated to respect
          the new API. 
        - BUGFIX: src/drvPadAdcStream.c - when reading the FIFOS the first
          couple of samples must be skipped as they generate initial
          clock cycles. Until now we used the stream packet index == 0
          condition to detect the first samples. With multi-packet
          streams this is no longer correct. E.g., in row-major format
          a new row is started at a non-zero index.
          As a result, the second argument to 'drvPadReadFifosXXXMajor()'
          was changed (but is backwards compatible for streams with
          only single packets).
        - public fidProcessGeneric() routine added this transmits timestamps
          to PADs at fiducial-time. The 'active' timeslots are configurable
          (but default to TS1+TS4).
udpComm-R2-2-2:
		- Build against event module version: event-R3-2-2-br_generaltime-2-2
udpComm-R2-2-1: 
		- Build against event module version: event-R3-2-2-br_generaltime-2-1

udpComm-R2-2-0: - Build against event module version: event-R3-2-2-br_generaltime-2-0
                  Fixes by Till to src/padProto.c, drvPadUdpComm.c, drvPadAdcStream.c
			(see Changelog for details)

udpComm-R2-1-6: - Build against event module version: event-R3-2-1-br_backprop-2-1
                  base-R3-14-8-2-lcls6_p1
                  miscUtils-R2-2-1
                  generalTime-R2-2-1

udpComm-R2-1-5: - Build against event module version: event-R3-2-2-br_generaltime-1-3
                  The event module fixes a bug with BSA

udpComm-R2-1-4:  (2011/Sept/27, Ernest)
                 - Build against event module version: event-R3-2-2-br_generaltime-1-2
                   the new event module now supports EVRs under linux
udpComm-R2-1-3:  (2011/Aug/04, Till)
               - Added fix for run-time test (whether post-3.14.9 EVR code is patched);
                 see ChangeLog for details.
udpComm-R2-1-2:  (2011/Aug/03, Ernest)
                 - Build against event module version: event-R3-2-2-br_generaltime-1-1
udpComm-R2-1-1:  (2011/Jun/06, Till)

               - drvPadUdpComm.c: defined TS1_OR_4_TIME for post- base-3.14.9 (bundled
                 generalTime) where we use epicsTimeEventBestTime (== -1). However,
                 this requires evrTimeGet():event/evrTime.c to be modified. Added a
                 run-time check for this modification and fail driver initialization
                 if the check doesn't pass.
               - fidProcess.c, wavBuf.c, devWfRawSig.c: include <errlog.h> to silence
                 compiler warnings under base-3.14.12

udpComm-R2-1-0:  (2011/May/09, Till)

                  o several bug-fixes to new features as well as more new
				    features (fragmented streams).
udpComm-R2-0-0:  (2011/April/22, Till)
                 Several enhancements in order to better support LLRF needs.
                  o drvPadUdpComm is data 'kind' agnostic and supports up to
                    8 kinds as defined by the padProto.
                  o new option to support streaming only a single channel
                    (instead of the normal 4).
                  o support packet reference count so that a single packet
                    can be shared by multiple threads and free'd only when
                    the last user releases it.
                  o preparation for better support for multi-index (= fragmented)
                    streams.
                 Since these changes required modifications to the padProtocol
                 the major release version was bumped. 
udpComm-R1-3-2:  (2011/April/05, Ernesto)
                 Changes to decouple the version of EPICS BASE from the configure/RELEASE
                 Everything is essentially done in the RELEASE_SITE file now.
                 

udpComm-R1-3-1:  (2010/06/01, T.S.)
		 Just another module-jungle release.
		 Built against event-R3-2-1 instead of event-R3-2-0.

udpComm-R1-3-0:  (2010/05/24, T.S.) This release adds a few diagnostics:
                  * 'padStream' statistics counters reporting how
                    many stream packets were sent, how often the stream
                    timestamp is updated and recording the max. delay
                    between updates.
                  
udpComm-R1-2-0:  (2010/04/23, T.S.) This release fixes bugs:
                  * udpComm packet payload is NOT ALIGNED
                    to the boundary promised by
                    udpComm.h: UDPCOMM_ALIGNMENT
                    In reality, the payload is at a well-known
                    offset from an alignment boundary.
                    To clarify this and force users who used
                    UDPCOMM_ALIGNMENT this symbol was *removed*
                    and replace ty UDPCOMM_DATA_ALGN_OFF and
                    UDPCOMM_DATA_ALGN which define the offset from
                    and the alignment boundary, respectively.

                  * padStreamStart() would often fail immediately
                    after a successful padStreamStart(). This was
                    because recent lanIpBasic only asynchronously
                    updates the ARP cache. FIXED by internally creating
                    an ARP cache entry.

                 Enhancements:
 
                  * Added rudimentary drvPadUdpComm documentation:
                    README.drvPadUdpComm; additional documentation is
                    in the form of more detailed comments in header files.

udpComm-R1-1-0:  Built against rtems 4.9.4 and EPICS BASE:
                 base-R3-14-8-2-lcls6

udpComm-R1-0-0:  Built against rtems 4.9.3 and EPICS BASE:
                 base-R3-14-8-2-lcls5
